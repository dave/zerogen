package main

import (
	"errors"
	"go/ast"
	"io"

	"github.com/dave/jennifer/jen"
)

// generator will work on the selected structure of one file
type generator struct {
	structures []*ast.TypeSpec
	buf        *jen.File
	pkgName    string
	inited     bool
	w          io.Writer
}

func newGenerator(str []*ast.TypeSpec, pkgName string, w io.Writer) *generator {
	return &generator{
		structures: str,
		pkgName:    pkgName,
		w:          w,
	}
}

func (g *generator) init() error {
	_, err := g.w.Write([]byte("// Code generated by github.com/mrsinham/rst. DO NOT EDIT.\n"))
	if err != nil {
		return err
	}
	g.buf = jen.NewFile(g.pkgName)
	g.inited = true
	return nil
}

func (g *generator) do() error {

	var err error
	if !g.inited {
		g.init()
	}
	for i := range g.structures {
		err = g.doOne(g.structures[i])
		if err != nil {
			return err
		}
	}

	return g.buf.Render(g.w)
}

func (g *generator) doOne(t *ast.TypeSpec) error {
	//var st *ast.StructType
	var ok bool
	if _, ok = t.Type.(*ast.StructType); !ok {
		// TODO: prevent generator to receive only valid structure
		return errors.New("type spec is not a structtype")
	}

	// write structure func header

	g.buf.Func().Params(jen.Id(string(t.Name.Name[0])).Op("*").Id(t.Name.Name)).Id("Reset").Params().Block()

	//for i := range st.Fields.List {
	//st.Fields.List[i].
	//}

	return nil
}
